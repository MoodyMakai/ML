# -*- coding: utf-8 -*-
"""HeartData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NiJ4V8jqZ2ApV8zMWyTGpWcCBgaMwhvP
"""

#https://www.kaggle.com/code/prashant111/svm-classifier-tutorial


    # Age: age of the patient [years]
    # Sex: sex of the patient [M: Male, F: Female]
    # ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]
    # RestingBP: resting blood pressure [mm Hg]
    # Cholesterol: serum cholesterol [mm/dl]
    # FastingBS: fasting blood sugar [1: if FastingBS > 120 mg/dl, 0: otherwise]
    # RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]
    # MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]
    # ExerciseAngina: exercise-induced angina [Y: Yes, N: No]
    # Oldpeak: oldpeak = ST [Numeric value measured in depression]
    # ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]
    # HeartDisease: output class [1: heart disease, 0: Normal]

#https://scikit-learn.org/stable/modules/preprocessing.html

import pandas as pd
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler
from sklearn.inspection import DecisionBoundaryDisplay

df = pd.read_csv(r'/content/heart.csv')
df.head(10)

#df.loc[:,'Male'] = df.Sex == 'M'
#df.drop(columns = 'Sex', inplace = True)

enc = preprocessing.OneHotEncoder(sparse_output=False)
enc.fit(df.loc[:,['ChestPainType']])
cpt = enc.transform(df.loc[:,['ChestPainType']])
enc.categories_

df.loc[:,enc.categories_[0]]=cpt

df.RestingBP.describe()

idx = df[df.RestingBP ==0].index
df.drop(idx, inplace = True)
z = df[df.Cholesterol == 0].index
df.drop(z, inplace = True)

enc = preprocessing.OneHotEncoder(sparse_output=False)
enc.fit(df.loc[:,['RestingECG','ST_Slope', 'ExerciseAngina' ]])
cpts = enc.transform(df.loc[:,['RestingECG', 'ST_Slope', 'ExerciseAngina']])
enc.categories_

nums = ['MaxHR']
num = ['Age','RestingBP','FastingBS','Cholesterol','MaxHR','Oldpeak']
scl = preprocessing.StandardScaler()
scl.fit(df.loc[:,nums])
thy = scl.transform(df.loc[:,nums])

chest = np.reshape(cpt, (-1,1))
newz1 = np.delete(chest, range(1,2927))
feats = np.c_[newz1, thy]
X = np.reshape(feats, (-1,2))
Y = df.HeartDisease

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 0)
classifier = SVC(kernel = 'rbf', random_state = 0)
classifier.fit(X_train, Y_train)

_, ax = plt.subplots(figsize=(4, 3))
DecisionBoundaryDisplay.from_estimator(
    classifier,
    X,
    cmap=plt.cm.Paired,
    ax=ax,
    response_method="predict",
    plot_method="pcolormesh",
    shading="auto",
    xlabel="1",
    ylabel="2",
    eps=0.5,)

plt.scatter(X[:, 0], X[:, 1], c=Y, edgecolors="k", cmap=plt.cm.Paired)
plt.xticks(())
plt.yticks(())
plt.show()

Y_pred = classifier.predict(X_test)
cm = confusion_matrix(Y_test, Y_pred)
print(cm)
accuracy_score(Y_test,Y_pred)